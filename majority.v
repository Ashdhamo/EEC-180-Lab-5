
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module majority(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,


	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================


    //input [9:0] SW,
    //input [1:0] KEY,
    //output reg [3:0] HEX0,
   // output reg [3:0] HEX1;



    RAM RAM_inst (
        .data(SW [7:4]),
        .addr(SW [3:0]),
        .we(SW[9]),
        .clock(clock),
        .q(data_out),
    );
   wire [3:0] data_out;
   reg word_enable;
	reg clock;
	
	//reg [9:0]  SW ;
	//always@(*)
	//begin
		//data = SW [7:4];
		//addr = SW [3:0];
	//end	
	// Assign clock signal based on KEY[0]
    always @(posedge KEY[0])
	 begin
       clock <= ~clock;
	 end
    // Assign word enable based on SW[9]
    //always @*
     //   word_enable = SW[9];

    // Read data from the RAM based on SW[8]
	 assign LEDR[7:0] = data_out;
   // always @*
    //begin
      //  if (SW[8] == 1)
        //begin
          //  data_out = RAM_inst.q; // Data_Out Display as HEX1
            
     //   end
       // else
        //begin
          //  data_out = RAM_inst.q; // Data_Out Display as HEX0
           
       // end
   // end
endmodule

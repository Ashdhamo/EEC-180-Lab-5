
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module majority(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

endmodule



module RAM (

  input [(4-1):0] data,
  input [(4-1):0] addr,
  input we, clk,
  output reg [(4-1):0] q
);
parameter DATA_WIDTH = 4; parameter
ADDR_WIDTH = 4;
// Declare the RAM variable
reg [(4-1):0] ram1[(2**4)-1:0];
reg [(4-1):0] ram0[(2**4)-1:0];
/* synthesis ramstyle = "M9K" */
  reg [3:0] mem [182:0];//also found 127

    always @(posedge clk) 
	 begin
      if (we) begin
			RAM[addr] = data;
          //mem[address] <= data_in; // write
		end	 
			q <= RAM[addr];
      //data_out <= mem[address]; // read
	 end
	 
	 assign SW [7:4] = data;
	 assign SW [3:0] = addr;
    assign KEY[0] = clock
		

	  if (SW[9]) begin // Write Enable for both RAM modules for SW[9]
	  we;
	  end
     if (SW[8]) begin
        data_out <= ram1[addr]; // Data_Out Display as HEX1
		  assign HEX1 = data_out;
     end 
	  if begin
        data_out <= ram0[addr]; // Data_Out Display as HEX0
		  assign HEX0 = data_out;
     end
		
 
endmodule

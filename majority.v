
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module majority(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,


	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================


		ram_1port RAM0_inst (
        .data(SW [3:0]),
        .addr(SW [8:4]),
        .we(SW[9]),
        .clock(KEY[0]),
        .q(w1)
    );
	 wire w1, w0;
	 	ram_1port RAM1_inst (
        .data(SW [3:0]),
        .addr(SW [8:4]),
        .we(SW[9]),
        .clock(KEY[0]),
        .q(w2)
		  );
		seg7hex seg0 (.hex(w0), .seg(HEX0[7:0]));
		seg7hex seg1 (.hex(w1), .seg(HEX1[7:0]));
		seg7hex seg2 (.hex(SW[7:4]), .seg(HEX2[7:0]));
		seg7hex seg3 (.hex(SW[3:0]), .seg(HEX3[7:0]));
	
//assign LEDR[3:0] = w1&SW[8] + w0&~SW[8];
		  
//if (SW[8]== 1) LEDR[3:0] = w1;


//else assign LEDR[3:0] = w2;	
  // wire [3:0] data_out;
   //reg word_enable;
//	reg clock;
	//assign LEDR[7:4] = SW[7:4];

 //   always @(posedge KEY[0])
//	 begin
  //     clock <= ~clock;
	// end

	// assign LEDR[7:0] = data_out;
 
endmodule

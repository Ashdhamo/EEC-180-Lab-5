
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module majority(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

endmodule


module DE10Lite (
    input [3:0] data,
    input [3:0] addr,
    input we, clk,
    input [9:0] SW,
    input [1:0] KEY,
    output reg [3:0] HEX0,
    output reg [3:0] HEX1
);

    RAM RAM_inst (
        .data(data),
        .addr(addr),
        .we(we),
        .clock(clock),
        .q(),
    );
   reg [3:0] data_out;
   reg word_enable;
	reg clock;
	
	always@*
	begin
		reg SW [7:4] = data;
	       SW [3:0] = addr;
	end	
	// Assign clock signal based on KEY[0]
    always @(posedge KEY[0])
	 begin
       clock <= ~clock;
	 end
    // Assign word enable based on SW[9]
    always @*
        word_enable = SW[9];

    // Read data from the RAM based on SW[8]
    always @*
    begin
        if (SW[8] == 1)
        begin
            data_out = RAM_inst.q; // Data_Out Display as HEX1
            HEX1 = data_out;
        end
        else
        begin
            data_out = RAM_inst.q; // Data_Out Display as HEX0
            HEX0 = data_out;
        end
    end
endmodule
